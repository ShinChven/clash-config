const fs = require('fs-extra');
const yaml = require('js-yaml');
const path = require('path');
const url = require('url');

const {PROXIES_DIR} = require('../paths');

/**
 * Decode base64 string.
 * @param str
 * @returns {string}
 */
const decodeBase64String = (str) => {
  return Buffer.from(str, 'base64').toString();
}

/**
 * Alert that the proxy file already exists.
 * @param proxyFilePath
 */
const alertExists = (proxyFilePath) => {
  console.error('Failed: Proxy file already exists at', proxyFilePath);
  console.log('Create a proxy with a assigned name: clash add-proxy <uri> [name]');
}

/**
 * Add a ss proxy.
 * @param uri
 * @returns {Promise<void>}
 */
const addSSProxy = async (uri) => {
  const [, , , , proxy_name] = process.argv;
  let [uriString, hash] = uri.split('#');
  const uriPath = uriString.replace('ss://', '');
  const [cipher, passwordAndDomain, port] = decodeBase64String(uriPath).split(':');
  const [password, server] = passwordAndDomain.split('@');

  const name = proxy_name || hash || `ss-${server}-${port}`;

  const proxyFilePath = path.resolve(PROXIES_DIR, `${name}.yaml`);

  if (fs.pathExistsSync(proxyFilePath)) {
    return alertExists(proxyFilePath);
  }

  const proxy = {
    name,
    type: 'ss',
    cipher,
    password,
    server,
    port: parseInt(port, 10),
    originalUri: uri,
  }
  let yml = yaml.dump(proxy, {indent: 2});
  await fs.outputFile(proxyFilePath, yml);
  // console.log(yml);
  console.log('Proxy file generated at', proxyFilePath);
};

/**
 * Add a ssr proxy.
 * this function was generated by GitHub Copilot, I didn't test it. Use it at your own risk.
 * @param uri
 * @returns {Promise<void>}
 */
const addSSRProxy = async (uri) => {
  const [, , , , proxy_name] = process.argv;
  let [uriString, hash] = uri.split('#');
  const uriPath = uriString.replace('ssr://', '');
  const [server, port, protocol, method, obfs, passwordAndParams] = decodeBase64String(uriPath).split(':');
  const [password, params] = passwordAndParams.split('/?');
  const paramsObj = {};
  params.split('&').forEach((param) => {
    const [key, value] = param.split('=');
    paramsObj[key] = value;
  });
  const name = proxy_name || hash || `ssr-${server}-${port}`;
  const proxyFilePath = path.resolve(PROXIES_DIR, `${name}.yaml`);
  if (fs.pathExistsSync(proxyFilePath)) {
    return alertExists(proxyFilePath);
  }
  const proxy = {
    name,
    type: 'ssr',
    server,
    port: parseInt(port, 10),
    cipher: method,
    password,
    protocol,
    obfs,
    "obfs-host": paramsObj.obfsparam,
    "udp": true,
    originalUri: uri,
  }
  const yml = yaml.dump(proxy, {indent: 2});
  await fs.outputFile(proxyFilePath, yml);
  console.log(yml);
  console.log('Proxy file generated at', proxyFilePath);
}


/**
 * Add a vmess proxy.
 * @param uri
 * @returns {Promise<void>}
 */
const addVmessProxy = async (uri) => {
  const [, , , , proxy_name] = process.argv;
  let [uriString, hash] = uri.split('#');
  const uriPath = uriString.replace('vmess://', '');
  const decoded = decodeBase64String(uriPath);
  const data = JSON.parse(decoded);
  const {id, port, add} = data;
  const name = proxy_name || hash || `vmess-${add}-${port}`;
  const proxyFilePath = path.resolve(PROXIES_DIR, `${name}.yaml`);
  if (fs.pathExistsSync(proxyFilePath)) {
    return alertExists(proxyFilePath);
  }
  const proxy = {
    name,
    type: 'vmess',
    server: add,
    port: parseInt(port, 10),
    uuid: id,
    alterId: 0,
    cipher: "auto",
    tls: false,
    "skip-cert-verify": false,
    originalUri: uri,
  }
  const yml = yaml.dump(proxy, {indent: 2});
  await fs.outputFile(proxyFilePath, yml);
  // console.log(yml);
  console.log('Proxy file generated at', proxyFilePath);
}

const addProxy = async () => {
  const [, , , uri] = process.argv;

  if (!uri) {
    console.log('No URI provided');
    return;
  }

  const {protocol} = url.parse(uri);

  switch (protocol) {
    case 'ss:':
      await addSSProxy(uri);
      break;
    case 'ssr:':
      await addSSRProxy(uri);
      break;
    case 'vmess:':
      await addVmessProxy(uri);
      break;
    default:
      console.log('Unsupported protocol', protocol);
  }

}

module.exports = addProxy;
